diff -ruw code/nel/src/misc/eval_num_expr.cpp code/nel/src/misc/eval_num_expr.cpp
--- code/nel/src/misc/eval_num_expr.cpp	2019-01-08 18:04:25.735817692 +0100
+++ code/nel/src/misc/eval_num_expr.cpp	2019-01-08 15:05:01.719776240 +0100
@@ -1309,7 +1309,7 @@
 	9,	// LogicalAnd
 	10,	// LogicalOr
 	11,	// LogicalXor
-	0xffffffff,	// OperatorCount
+	0xffff,	// OperatorCount
 	20,	// NotOperator
 };
 
diff -ruw code/nel/src/misc/i18n.cpp code/nel/src/misc/i18n.cpp
--- code/nel/src/misc/i18n.cpp	2019-01-08 18:04:25.715817483 +0100
+++ code/nel/src/misc/i18n.cpp	2019-01-08 15:06:54.300955836 +0100
@@ -914,9 +914,9 @@
 
 void CI18N::readTextBuffer(uint8 *buffer, uint size, ucstring &result, bool forceUtf8)
 {
-	static uint8 utf16Header[] = {char(0xff), char(0xfe)};
-	static uint8 utf16RevHeader[] = {char(0xfe), char(0xff)};
-	static uint8 utf8Header[] = {char(0xef), char(0xbb), char(0xbf)};
+	static uint8 utf16Header[] = {uint8(0xff), uint8(0xfe)};
+	static uint8 utf16RevHeader[] = {uint8(0xfe), uint8(0xff)};
+	static uint8 utf8Header[] = {uint8(0xef), uint8(0xbb), uint8(0xbf)};
 
 	if (forceUtf8)
 	{
diff -ruw code/nel/src/misc/words_dictionary.cpp code/nel/src/misc/words_dictionary.cpp
--- code/nel/src/misc/words_dictionary.cpp	2019-01-08 18:04:25.745817796 +0100
+++ code/nel/src/misc/words_dictionary.cpp	2019-01-08 15:14:15.885560774 +0100
@@ -247,7 +247,9 @@
  */
 inline CSString CWordsDictionary::makeResult( const CSString &key, const CSString &word )
 {
-	return key + CSString(": ") + word;
+		CSString toRet = key + CSString(": ");
+		toRet = toRet + word;
+		return toRet;
 }
 
 
--- code/nel/src/3d/zone_search.cpp	2019-01-14 00:00:13.896525597 +0100
+++ code/nel/src/3d/zone_search.cpp	2019-01-14 00:07:52.101752170 +0100
@@ -73,7 +73,7 @@
 
 	sprintf(name, "%d_%c%c.zonel", zoneY, firstLetter, secondLetter);
 
-	return make_pair<string, uint32>(string(name), distance);
+	return make_pair<string, uint32&>(string(name), distance);
 }
 
 
diff -urN code/nel/include/nel/misc/diff_tool.h code/nel/include/nel/misc/diff_tool.h
--- code/nel/include/nel/misc/diff_tool.h	2019-01-13 21:33:35.276919120 +0100
+++ code/nel/include/nel/misc/diff_tool.h	2019-01-14 15:58:55.983614148 +0100
@@ -19,6 +19,8 @@
 
 #include "i18n.h"
 
+using namespace std;
+
 namespace STRING_MANAGER
 {
 	const ucstring		nl("\r\n");
diff -urN code/nel/src/3d/driver/opengl/driver_opengl_vertex_buffer_hard.cpp code/nel/src/3d/driver/opengl/driver_opengl_vertex_buffer_hard.cpp
--- code/nel/src/3d/driver/opengl/driver_opengl_vertex_buffer_hard.cpp	2019-01-14 00:11:02.523918778 +0100
+++ code/nel/src/3d/driver/opengl/driver_opengl_vertex_buffer_hard.cpp	2019-01-14 00:17:23.968321169 +0100
@@ -1231,7 +1231,7 @@
 	if (glGetError() != GL_NO_ERROR)
 	{
 		nglDeleteBuffersARB(1, &vertexBufferID);
-		return false;
+		return NULL;
 	}
 	CVertexBufferHardARB *newVbHard= new CVertexBufferHardARB(_Driver, vb);
 	newVbHard->initGL(vertexBufferID, this, _VBType);
diff -urN code/nel/src/pacs/local_retriever.cpp code/nel/src/pacs/local_retriever.cpp
--- code/nel/src/pacs/local_retriever.cpp	2019-01-13 21:33:44.766999918 +0100
+++ code/nel/src/pacs/local_retriever.cpp	2019-01-14 02:12:21.367824081 +0100
@@ -2253,7 +2253,7 @@
 
 				for (k=0; k+1<ochain.getVertices().size(); ++k)
 				{
-					edges.push_back(make_pair<CVector2s, CVector2s>(ochain[k], ochain[k+1]));
+					edges.push_back(make_pair<const CVector2s&, const CVector2s&>(ochain[k], ochain[k+1]));
 				}
 			}
 		}
diff -urN code/nel/tools/misc/make_sheet_id/make_sheet_id.cpp code/nel/tools/misc/make_sheet_id/make_sheet_id.cpp
--- code/nel/tools/misc/make_sheet_id/make_sheet_id.cpp	2019-01-13 21:34:01.517142984 +0100
+++ code/nel/tools/misc/make_sheet_id/make_sheet_id.cpp	2019-01-14 12:37:32.789530559 +0100
@@ -156,7 +156,7 @@
 		}
 		else
 		{
-			if( getFileType( (*itIF).second, fileType ) )
+			/*if( getFileType( (*itIF).second, fileType ) )
 			{	
 				// insert the association (file type/file type id)
 				map<string,uint8>::iterator itFT = FileTypeToId.find(fileType);
@@ -166,9 +166,9 @@
 				}
 			}
 			else
-			{
+			{*/
 				nlwarning("Unknown file type for the file : %s",(*itIF).second.c_str());
-			}
+			//}
 			++itIF;
 		}
 	}
diff -urN code/nel/tools/pacs/build_rbank/build_rbank.cpp code/nel/tools/pacs/build_rbank/build_rbank.cpp
--- code/nel/tools/pacs/build_rbank/build_rbank.cpp	2019-01-13 21:34:01.437142300 +0100
+++ code/nel/tools/pacs/build_rbank/build_rbank.cpp	2019-01-14 14:01:37.069641157 +0100
@@ -990,7 +990,7 @@
 		{
 			if (Verbose)
 				nlinfo("unlink: %s", unlinkstr.c_str());
-			faultyInstances.insert(make_pair<uint, CFaultyInstance>(i, fi));
+			faultyInstances.insert(make_pair<uint&, CFaultyInstance&>(i, fi));
 		}
 	}
 
@@ -1046,7 +1046,7 @@
 			{
 				if (Verbose)
 					nlinfo("after fix: unlink: %s", unlinkstr.c_str());
-				faultyInstances.insert(make_pair<uint, CFaultyInstance>(i, fi));
+				faultyInstances.insert(make_pair<uint&, CFaultyInstance&>(i, fi));
 			}
 		}
 	}
diff -urN code/ryzom/server/src/ai_data_service/pacs_scan.cpp code/ryzom/server/src/ai_data_service/pacs_scan.cpp
--- code/ryzom/server/src/ai_data_service/pacs_scan.cpp	2019-01-13 21:34:51.177570263 +0100
+++ code/ryzom/server/src/ai_data_service/pacs_scan.cpp	2019-01-14 23:05:09.984031345 +0100
@@ -1651,7 +1651,7 @@
 									first.flags = (topNode.isInWater() ? 1 : 0) + (topNode.isInNogo() ? 2 : 0);
 
 									// push first position
-									stacks[first.flags].insert(make_pair<sint, CWorldPosition>(first.flags, stwp));
+									stacks[first.flags].insert(make_pair<uint8&, CWorldPosition&>(first.flags, stwp));
 
 									while (true)
 									{
@@ -1750,11 +1750,11 @@
 													}
 													if (tmp.getTopologyNode().Id == topNode.Id)
 													{
-														stacks[0].insert(make_pair<sint, CWorldPosition>(ndist, tmp));
+														stacks[0].insert(make_pair<uint&, CWorldPosition&>(ndist, tmp));
 													}
 													else
 													{
-														stacks[tmpflags+1].insert(make_pair<sint, CWorldPosition>(ndist, tmp));
+														stacks[tmpflags+1].insert(make_pair<uint&, CWorldPosition&>(ndist, tmp));
 													}
 												}										
 											}
diff -urN code/ryzom/server/src/ai_service/child_container.h code/ryzom/server/src/ai_service/child_container.h
--- code/ryzom/server/src/ai_service/child_container.h	2019-01-13 21:34:55.377606597 +0100
+++ code/ryzom/server/src/ai_service/child_container.h	2019-01-14 23:17:02.301560629 +0100
@@ -422,7 +422,7 @@
 template <class TChld>
 TChld* CCont<TChld>::addChild(TChld* child)
 {
-	return addChild(child, getFirstFreeChild());
+	return this->addChild(child, getFirstFreeChild());
 }
 
 template <class TChld>
@@ -546,13 +546,13 @@
 template <class TChld>
 CAliasTreeOwner* CAliasCont<TChld>::addAliasChild(CAliasTreeOwner* child)
 {
-	return NLMISC::type_cast<CAliasTreeOwner*>(addChild(static_cast<TChld*>(child)));
+	return NLMISC::type_cast<CAliasTreeOwner*>(this->addChild(static_cast<TChld*>(child)));
 }
 
 template <class TChld>
 CAliasTreeOwner* CAliasCont<TChld>::addAliasChild(CAliasTreeOwner* child, uint32 index)
 {
-	return NLMISC::type_cast<CAliasTreeOwner*>(addChild(static_cast<TChld*>(child), index));
+	return NLMISC::type_cast<CAliasTreeOwner*>(this->addChild(static_cast<TChld*>(child), index));
 }
 
 template <class TChld>
diff -urN code/ryzom/server/src/ai_service/state_instance.h code/ryzom/server/src/ai_service/state_instance.h
--- code/ryzom/server/src/ai_service/state_instance.h	2019-01-13 21:34:50.137561271 +0100
+++ code/ryzom/server/src/ai_service/state_instance.h	2019-01-15 01:46:43.015319809 +0100
@@ -24,6 +24,7 @@
 #include "event_manager.h"
 #include "script_vm.h"
 #include "ai_grp.h"
+#include "event_reaction_include.h"
 
 class CStateMachine;
 class CGroup;
diff -urN code/ryzom/server/src/ai_share/16x16_layer.cpp code/ryzom/server/src/ai_share/16x16_layer.cpp
--- code/ryzom/server/src/ai_share/16x16_layer.cpp	2019-01-13 21:34:54.607599934 +0100
+++ code/ryzom/server/src/ai_share/16x16_layer.cpp	2019-01-14 16:36:07.542036099 +0100
@@ -100,7 +100,7 @@
 
 		map<sint32, uint>::iterator	it = count.find(val);
 		if (it == count.end())
-			count.insert(make_pair<sint32, uint>(val, 1));
+			count.insert(make_pair<sint32&, int>(val, 1));
 		else
 			++((*it).second);
 	}
diff -urN code/ryzom/server/src/ai_share/world_map.cpp code/ryzom/server/src/ai_share/world_map.cpp
--- code/ryzom/server/src/ai_share/world_map.cpp	2019-01-13 21:35:01.167656730 +0100
+++ code/ryzom/server/src/ai_share/world_map.cpp	2019-01-14 22:50:05.204475799 +0100
@@ -1466,7 +1466,7 @@
 	uint father = (uint)nodes.size()-1;
 
 	// Add start topology to visited nodes (father holds start topo node index for the moment)
-	visited.insert(make_pair<CTopology::TTopologyId,uint>(startTopo, father));
+	visited.insert(make_pair<CTopology::TTopologyId&,uint&>(startTopo, father));
 	// Push start node in the heap with a zero cost
 	heap.push(0.0f, father);
 
@@ -1559,7 +1559,7 @@
 			// Add node to heap with a computed f(n)=g(n)+h(n)
 			heap.push(distance + heuristic, child);
 			// Add node to visited
-			visited.insert(make_pair<CTopology::TTopologyId,uint>(next, child));
+			visited.insert(make_pair<const CTopology::TTopologyRef&,uint&>(next, child));
 		}
 	}
 
@@ -1630,7 +1630,7 @@
 	uint	father = (uint)nodes.size()-1;
 
 	// add current to visited nodes
-	visited.insert(make_pair<CTopology::TTopologyId,uint>(startTopo, father));
+	visited.insert(make_pair<CTopology::TTopologyRef&,uint&>(startTopo, father));
 	heap.push(0.0f, father);
 
 	bool	found=false;
@@ -1696,7 +1696,7 @@
 
 			// add node to visited and to heap
 			heap.push(heuristic, child);
-			visited.insert(make_pair<CTopology::TTopologyId,uint>(next, child));
+			visited.insert(make_pair<const CTopology::TTopologyRef&,uint&>(next, child));
 		}
 	}
 
@@ -1764,7 +1764,7 @@
 	uint father = (uint)nodes.size()-1;
 
 	// Add start node to visited nodes (father holds start node index for the moment)
-	visited.insert(make_pair<CAStarNode, uint>(startNode, father));
+	visited.insert(make_pair<CAStarNode&, uint&>(startNode, father));
 	// Push start node in the heap with a zero cost
 	heap.push(0.0f, father);
 
@@ -1851,7 +1851,7 @@
 			// Add node to heap with a computed f(n)=g(n)+h(n)
 			heap.push(distance + heuristic, child);
 			// Add node to visited
-			visited.insert(make_pair<CAStarNode, uint>(next, child));
+			visited.insert(make_pair<CAStarNode&, uint&>(next, child));
 		}
 	}
 
diff -urN code/ryzom/server/src/entities_game_service/fame_pd.cpp code/ryzom/server/src/entities_game_service/fame_pd.cpp
--- code/ryzom/server/src/entities_game_service/fame_pd.cpp	2019-01-13 21:35:04.257683506 +0100
+++ code/ryzom/server/src/entities_game_service/fame_pd.cpp	2019-01-17 14:04:19.397831948 +0100
@@ -516,7 +516,7 @@
 		if (rowIndex == RY_PDS::INVALID_ROW_INDEX || tableIndex == RY_PDS::INVALID_TABLE_INDEX)	break;
 		NLMISC::CSheetId	__k;
 		data.serial(__k);
-		_Entries.insert(std::make_pair<NLMISC::CSheetId,CFameContainerEntryPD>(__k, CFameContainerEntryPD()));
+		_Entries.insert(std::make_pair<NLMISC::CSheetId&,CFameContainerEntryPD>(__k, CFameContainerEntryPD()));
 		CFameContainerEntryPD*	__o = &(_Entries[__k]);
 		PDSLib.setRowIndex(rowIndex, __o);
 		__o->pds__fetch(data);
diff -urN code/ryzom/server/src/entities_game_service/guild_container_pd.cpp code/ryzom/server/src/entities_game_service/guild_container_pd.cpp
--- code/ryzom/server/src/entities_game_service/guild_container_pd.cpp	2019-01-13 21:34:51.107569658 +0100
+++ code/ryzom/server/src/entities_game_service/guild_container_pd.cpp	2019-01-17 18:33:42.811737107 +0100
@@ -298,7 +298,7 @@
 		TGuildId	__k;
 		data.serial(__k);
 		CGuildPD*	__o = static_cast<CGuildPD*>(PDSLib.create(tableIndex));
-		_Guilds.insert(std::make_pair<TGuildId,CGuildPD*>(__k, __o));
+		_Guilds.insert(std::make_pair<TGuildId&,CGuildPD*&>(__k, __o));
 		PDSLib.setRowIndex(rowIndex, __o);
 		__o->pds__fetch(data);
 		__o->pds__setParentUnnotified(this);
diff -urN code/ryzom/server/src/entities_game_service/guild_manager/guild_member_module.cpp code/ryzom/server/src/entities_game_service/guild_manager/guild_member_module.cpp
--- code/ryzom/server/src/entities_game_service/guild_manager/guild_member_module.cpp	2019-01-13 21:34:55.807610318 +0100
+++ code/ryzom/server/src/entities_game_service/guild_manager/guild_member_module.cpp	2019-02-10 16:31:43.131201339 +0100
@@ -494,7 +494,7 @@
 CMissionGuild * CGuildMemberModule::pickMission( TAIAlias alias )
 {
 	/// todo guild mission
-	return false;
+	return NULL;
 }
 
 //----------------------------------------------------------------------------
diff -urN code/ryzom/server/src/entities_game_service/guild_pd.cpp code/ryzom/server/src/entities_game_service/guild_pd.cpp
--- code/ryzom/server/src/entities_game_service/guild_pd.cpp	2019-01-13 21:34:55.807610318 +0100
+++ code/ryzom/server/src/entities_game_service/guild_pd.cpp	2019-01-17 18:38:34.174236610 +0100
@@ -470,7 +470,7 @@
 		TCharacterId	__k;
 		data.serial(__k);
 		CGuildMemberPD*	__o = static_cast<CGuildMemberPD*>(PDSLib.create(tableIndex));
-		_Members.insert(std::make_pair<TCharacterId,CGuildMemberPD*>(__k, __o));
+		_Members.insert(std::make_pair<TCharacterId&,CGuildMemberPD*&>(__k, __o));
 		PDSLib.setRowIndex(rowIndex, __o);
 		__o->pds__fetch(data);
 		__o->pds__setParentUnnotified(this);
diff -urN code/ryzom/server/src/entities_game_service/mission_manager/mission_log.h code/ryzom/server/src/entities_game_service/mission_manager/mission_log.h
--- code/ryzom/server/src/entities_game_service/mission_manager/mission_log.h	2019-01-13 21:34:57.397624081 +0100
+++ code/ryzom/server/src/entities_game_service/mission_manager/mission_log.h	2019-02-10 17:57:12.177789481 +0100
@@ -61,11 +61,11 @@
 #define MISDBG if ( !VerboseMissions ){} else MISLOG
 
 // Syntax error logged to egs_mission.log
-#define MISLOGSYNTAXERROR(_PHRASE_)				MISLOG("sline:%u SYNTAX ERROR %s : "_PHRASE_, line, script[0].c_str());
-#define MISLOGSYNTAXERROR1(_PHRASE_,_PARAM_)	MISLOG("sline:%u SYNTAX ERROR %s : "_PHRASE_, line, script[0].c_str(), _PARAM_);
-#define MISLOGERROR(_PHRASE_)						MISLOG("sline:%u ERROR %s : "_PHRASE_, line, script[0].c_str());
-#define MISLOGERROR1(_PHRASE_,_PARAM_)				MISLOG("sline:%u ERROR %s : "_PHRASE_, line, script[0].c_str(), _PARAM_);
-#define MISLOGERROR2(_PHRASE_,_PARAM1_,_PARAM2_)	MISLOG("sline:%u ERROR %s : "_PHRASE_, line, script[0].c_str(), _PARAM1_, _PARAM2_);
+#define MISLOGSYNTAXERROR(_PHRASE_)				MISLOG("sline:%u SYNTAX ERROR %s : ", line, script[0].c_str());
+#define MISLOGSYNTAXERROR1(_PHRASE_,_PARAM_)	MISLOG("sline:%u SYNTAX ERROR %s : ", line, script[0].c_str(), _PARAM_);
+#define MISLOGERROR(_PHRASE_)						MISLOG("sline:%u ERROR %s : ", line, script[0].c_str());
+#define MISLOGERROR1(_PHRASE_,_PARAM_)				MISLOG("sline:%u ERROR %s : ", line, script[0].c_str(), _PARAM_);
+#define MISLOGERROR2(_PHRASE_,_PARAM1_,_PARAM2_)	MISLOG("sline:%u ERROR %s : ", line, script[0].c_str(), _PARAM1_, _PARAM2_);
 
 
 
diff -urN code/ryzom/server/src/entities_game_service/mission_pd.cpp code/ryzom/server/src/entities_game_service/mission_pd.cpp
--- code/ryzom/server/src/entities_game_service/mission_pd.cpp	2019-01-13 21:35:04.787688101 +0100
+++ code/ryzom/server/src/entities_game_service/mission_pd.cpp	2019-02-09 22:37:17.348118712 +0100
@@ -328,7 +328,7 @@
 		if (rowIndex == RY_PDS::INVALID_ROW_INDEX || tableIndex == RY_PDS::INVALID_TABLE_INDEX)	break;
 		uint32	__k;
 		data.serial(__k);
-		_States.insert(std::make_pair<uint32,CActiveStepStatePD>(__k, CActiveStepStatePD()));
+		_States.insert(std::make_pair<uint32&,CActiveStepStatePD>(__k, CActiveStepStatePD()));
 		CActiveStepStatePD*	__o = &(_States[__k]);
 		PDSLib.setRowIndex(rowIndex, __o);
 		__o->pds__fetch(data);
@@ -2353,7 +2353,7 @@
 		if (rowIndex == RY_PDS::INVALID_ROW_INDEX || tableIndex == RY_PDS::INVALID_TABLE_INDEX)	break;
 		uint32	__k;
 		data.serial(__k);
-		_Steps.insert(std::make_pair<uint32,CActiveStepPD>(__k, CActiveStepPD()));
+		_Steps.insert(std::make_pair<uint32&,CActiveStepPD>(__k, CActiveStepPD()));
 		CActiveStepPD*	__o = &(_Steps[__k]);
 		PDSLib.setRowIndex(rowIndex, __o);
 		__o->pds__fetch(data);
@@ -2367,7 +2367,7 @@
 		if (rowIndex == RY_PDS::INVALID_ROW_INDEX || tableIndex == RY_PDS::INVALID_TABLE_INDEX)	break;
 		uint32	__k;
 		data.serial(__k);
-		_Compass.insert(std::make_pair<uint32,CMissionCompassPD>(__k, CMissionCompassPD()));
+		_Compass.insert(std::make_pair<uint32&,CMissionCompassPD>(__k, CMissionCompassPD()));
 		CMissionCompassPD*	__o = &(_Compass[__k]);
 		PDSLib.setRowIndex(rowIndex, __o);
 		__o->pds__fetch(data);
@@ -2381,7 +2381,7 @@
 		if (rowIndex == RY_PDS::INVALID_ROW_INDEX || tableIndex == RY_PDS::INVALID_TABLE_INDEX)	break;
 		uint32	__k;
 		data.serial(__k);
-		_StepsDone.insert(std::make_pair<uint32,CDoneStepPD>(__k, CDoneStepPD()));
+		_StepsDone.insert(std::make_pair<uint32&,CDoneStepPD>(__k, CDoneStepPD()));
 		CDoneStepPD*	__o = &(_StepsDone[__k]);
 		PDSLib.setRowIndex(rowIndex, __o);
 		__o->pds__fetch(data);
@@ -2395,7 +2395,7 @@
 		if (rowIndex == RY_PDS::INVALID_ROW_INDEX || tableIndex == RY_PDS::INVALID_TABLE_INDEX)	break;
 		uint32	__k;
 		data.serial(__k);
-		_Teleports.insert(std::make_pair<uint32,CMissionTeleportPD>(__k, CMissionTeleportPD()));
+		_Teleports.insert(std::make_pair<uint32&,CMissionTeleportPD>(__k, CMissionTeleportPD()));
 		CMissionTeleportPD*	__o = &(_Teleports[__k]);
 		PDSLib.setRowIndex(rowIndex, __o);
 		__o->pds__fetch(data);
@@ -2409,7 +2409,7 @@
 		if (rowIndex == RY_PDS::INVALID_ROW_INDEX || tableIndex == RY_PDS::INVALID_TABLE_INDEX)	break;
 		uint32	__k;
 		data.serial(__k);
-		_InsidePlaces.insert(std::make_pair<uint32,CMissionInsidePlacePD>(__k, CMissionInsidePlacePD()));
+		_InsidePlaces.insert(std::make_pair<uint32&,CMissionInsidePlacePD>(__k, CMissionInsidePlacePD()));
 		CMissionInsidePlacePD*	__o = &(_InsidePlaces[__k]);
 		PDSLib.setRowIndex(rowIndex, __o);
 		__o->pds__fetch(data);
@@ -2423,7 +2423,7 @@
 		if (rowIndex == RY_PDS::INVALID_ROW_INDEX || tableIndex == RY_PDS::INVALID_TABLE_INDEX)	break;
 		uint32	__k;
 		data.serial(__k);
-		_OutsidePlaces.insert(std::make_pair<uint32,CMissionOutsidePlacePD>(__k, CMissionOutsidePlacePD()));
+		_OutsidePlaces.insert(std::make_pair<uint32&,CMissionOutsidePlacePD>(__k, CMissionOutsidePlacePD()));
 		CMissionOutsidePlacePD*	__o = &(_OutsidePlaces[__k]);
 		PDSLib.setRowIndex(rowIndex, __o);
 		__o->pds__fetch(data);
@@ -2437,7 +2437,7 @@
 		if (rowIndex == RY_PDS::INVALID_ROW_INDEX || tableIndex == RY_PDS::INVALID_TABLE_INDEX)	break;
 		uint32	__k;
 		data.serial(__k);
-		_HandledAIGroups.insert(std::make_pair<uint32,CHandledAIGroupPD>(__k, CHandledAIGroupPD()));
+		_HandledAIGroups.insert(std::make_pair<uint32&,CHandledAIGroupPD>(__k, CHandledAIGroupPD()));
 		CHandledAIGroupPD*	__o = &(_HandledAIGroups[__k]);
 		PDSLib.setRowIndex(rowIndex, __o);
 		__o->pds__fetch(data);
@@ -3276,7 +3276,7 @@
 		uint32	__k;
 		data.serial(__k);
 		CMissionPD*	__o = static_cast<CMissionPD*>(PDSLib.create(tableIndex));
-		_Missions.insert(std::make_pair<uint32,CMissionPD*>(__k, __o));
+		_Missions.insert(std::make_pair<uint32&,CMissionPD*&>(__k, __o));
 		PDSLib.setRowIndex(rowIndex, __o);
 		__o->pds__fetch(data);
 		__o->pds__setParentUnnotified(this);
diff -urN code/ryzom/server/src/entities_game_service/phrase_manager/combat_action.cpp code/ryzom/server/src/entities_game_service/phrase_manager/combat_action.cpp
--- code/ryzom/server/src/entities_game_service/phrase_manager/combat_action.cpp	2019-01-13 21:35:00.457650580 +0100
+++ code/ryzom/server/src/entities_game_service/phrase_manager/combat_action.cpp	2019-02-10 19:00:33.756513708 +0100
@@ -31,7 +31,7 @@
 	const AI_ACTION::TAiActionType actionType = aiAction->getType();
 	if (actionType != AI_ACTION::Melee && actionType != AI_ACTION::Range)
 	{
-		return false;
+		return NULL;
 	}
 	
 	AI_ACTION::TAiEffectType effectType = aiAction->getData().Combat.EffectFamily;
diff -urN code/ryzom/server/src/entities_game_service/phrase_manager/fg_prospection_phrase.cpp code/ryzom/server/src/entities_game_service/phrase_manager/fg_prospection_phrase.cpp
--- code/ryzom/server/src/entities_game_service/phrase_manager/fg_prospection_phrase.cpp	2019-01-13 21:34:53.947594222 +0100
+++ code/ryzom/server/src/entities_game_service/phrase_manager/fg_prospection_phrase.cpp	2019-02-10 21:03:00.448894870 +0100
@@ -1923,7 +1923,11 @@
 			fields[FPos] = fields[FPos].replace( " ", "" );
 			CSString imageFilename = fields[FRegion] + "-" + fields[FPlace] + ".tga";
 			imageFilename = imageFilename.replace( " ", "" );
-			CSString cmdLine = "makeDepositMap " + fields[FPos] + " " + pathName + imageFilename + " 1 600";
+			CSString cmdLine = "makeDepositMap " + fields[FPos];
+			cmdLine = cmdLine + " ";
+			cmdLine = cmdLine + pathName;
+			cmdLine = cmdLine + imageFilename;
+			cmdLine = cmdLine + " 1 600";
 			egs_feinfo( cmdLine.c_str() );
 			log.displayNL( ("\n\n<B><A HREF=\"" + imageFilename + "\">" + imageFilename + "</A></B>\n").c_str() );
 			ICommand::execute( cmdLine, log );
diff -urN code/ryzom/server/src/frontend_service/frontend_service.cpp code/ryzom/server/src/frontend_service/frontend_service.cpp
--- code/ryzom/server/src/frontend_service/frontend_service.cpp	2019-01-13 21:35:04.587686366 +0100
+++ code/ryzom/server/src/frontend_service/frontend_service.cpp	2019-02-09 13:21:55.501549319 +0100
@@ -1860,7 +1860,7 @@
 		if (reverse)
 			comp = -comp;
 
-		result.push_back(std::make_pair<float, CClientHost*>(comp, client));
+		result.push_back(std::make_pair<float&, CClientHost*&>(comp, client));
 	}
 
 	if (ucriterion != 0 && !result.empty())
diff -urN code/ryzom/server/src/gpm_service/world_position_manager.cpp code/ryzom/server/src/gpm_service/world_position_manager.cpp
--- code/ryzom/server/src/gpm_service/world_position_manager.cpp	2019-01-13 21:35:06.437702406 +0100
+++ code/ryzom/server/src/gpm_service/world_position_manager.cpp	2019-02-11 01:03:14.435420771 +0100
@@ -502,7 +502,7 @@
 	STOP_IF(IsRingShard,"Illegal use of CWorldPositionManager on ring shard");
 	if (_PatatSubscribeManager.exist(name))
 	{
-		_PatatSubscribeManager.subscribe(serviceId, make_pair<string,uint16>(name, id));
+		_PatatSubscribeManager.subscribe(serviceId, make_pair<const string&,uint16&>(name, id));
 	}
 }
 
@@ -2111,7 +2111,7 @@
 	{
 		if (entity->PlayerInfos->DistanceHistory.size() >= 20)
 			entity->PlayerInfos->DistanceHistory.pop_back();
-		entity->PlayerInfos->DistanceHistory.push_front(make_pair<CVectorD,	uint>(CVectorD(x*0.001, y*0.001, z*0.001), tick));
+		entity->PlayerInfos->DistanceHistory.push_front(make_pair<CVectorD, NLMISC::TGameCycle&>(CVectorD(x*0.001, y*0.001, z*0.001), tick));
 	}
 #endif
 
@@ -3225,7 +3225,7 @@
 		if (abs(x - entity->X) < range && abs(y - entity->Y) < range &&
 			(rrange = sqrt(sqr((x - entity->X)*0.001) + sqr((y - entity->Y)*0.001))) < frange)
 		{
-			entities.push_back(make_pair<CEntityId, sint32>(entity->Id, (sint32)(rrange*1000)));
+			entities.push_back(make_pair<CEntityId&, sint32>(entity->Id, (sint32)(rrange*1000)));
 		}
 	}
 
@@ -3238,7 +3238,7 @@
 		if (abs(x - entity->X) < range && abs(y - entity->Y) < range &&
 			(rrange = sqrt(sqr((x - entity->X)*0.001) + sqr((y - entity->Y)*0.001))) < frange)
 		{
-			entities.push_back(make_pair<CEntityId, sint32>(entity->Id, (sint32)(rrange*1000)));
+			entities.push_back(make_pair<CEntityId&, sint32>(entity->Id, (sint32)(rrange*1000)));
 		}
 	}
 }
diff -urN code/ryzom/server/src/input_output_service/string_manager_parser.cpp code/ryzom/server/src/input_output_service/string_manager_parser.cpp
--- code/ryzom/server/src/input_output_service/string_manager_parser.cpp	2019-01-13 21:35:06.567703533 +0100
+++ code/ryzom/server/src/input_output_service/string_manager_parser.cpp	2019-02-09 17:01:55.354885837 +0100
@@ -1356,7 +1356,7 @@
 	std::map<std::string, uint32>::const_iterator	iti;
 	for (iti=source._ColumnInfo.begin(); iti!=source._ColumnInfo.end(); ++iti)
 		if (dest._ColumnInfo.find((*iti).first) == dest._ColumnInfo.end())
-			extraColumns.push_back(std::make_pair<std::string, uint32>((*iti).first, osz+(uint32)extraColumns.size()));
+			extraColumns.push_back(std::make_pair<const std::__cxx11::basic_string<char>&, uint32>((*iti).first, osz+(uint32)extraColumns.size()));
 
 	for (iti=source._RowInfo.begin(); iti!=source._RowInfo.end(); ++iti)
 		if (dest._RowInfo.find((*iti).first) == dest._RowInfo.end())
diff -urN code/ryzom/server/src/logger_service/log_query.h code/ryzom/server/src/logger_service/log_query.h
--- code/ryzom/server/src/logger_service/log_query.h	2019-01-13 21:35:00.367649800 +0100
+++ code/ryzom/server/src/logger_service/log_query.h	2019-02-11 01:06:35.487677882 +0100
@@ -60,7 +60,7 @@
 	uint32		EndDate;	
 };
 
-const TTimeSlice FullTimeSlice = {0, ~0};
+const TTimeSlice FullTimeSlice = {(uint32)0, (uint32)~0};
 
 /// Defile the complete selected time line
 typedef std::vector<TTimeSlice>	TTimeLine;
diff -urN code/ryzom/server/src/mail_forum_service/mail_forum_service.cpp code/ryzom/server/src/mail_forum_service/mail_forum_service.cpp
--- code/ryzom/server/src/mail_forum_service/mail_forum_service.cpp	2019-01-13 21:35:04.277683679 +0100
+++ code/ryzom/server/src/mail_forum_service/mail_forum_service.cpp	2019-02-11 01:09:42.799783059 +0100
@@ -177,7 +177,7 @@
 		++pt;
 
 	// file contents "$$$$" -> end of file marker, file is complete, can be deleted
-	if (pt != '\0')
+	if (*pt != '\0')
 	{
 		CFile::deleteFile(file);
 
diff -urN code/ryzom/server/src/monitor_service/client.cpp code/ryzom/server/src/monitor_service/client.cpp
--- code/ryzom/server/src/monitor_service/client.cpp	2019-01-13 21:35:05.537694602 +0100
+++ code/ryzom/server/src/monitor_service/client.cpp	2019-02-11 01:15:37.663777100 +0100
@@ -273,7 +273,7 @@
 		TYPE_NAME_STRING_ID id = Str[i];
 		std::map<TYPE_NAME_STRING_ID, std::string>::iterator ite = StringMap.find (id);
 		nlassert (ite != StringMap.end());
-		strToSend.push_back( make_pair<TYPE_NAME_STRING_ID, string*>(id, &((*ite).second)) );
+		strToSend.push_back( make_pair<TYPE_NAME_STRING_ID&, string*>(id, &((*ite).second)) );
 		strTotalSize += 4+4+(uint)(*ite).second.size();
 	}
 
diff -urN code/ryzom/server/src/pd_lib/db_description_parser.cpp code/ryzom/server/src/pd_lib/db_description_parser.cpp
--- code/ryzom/server/src/pd_lib/db_description_parser.cpp	2019-01-13 21:35:05.627695382 +0100
+++ code/ryzom/server/src/pd_lib/db_description_parser.cpp	2019-01-14 23:07:35.515569212 +0100
@@ -260,7 +260,7 @@
 				return false;
 			}
 
-			typeNode.EnumValues.push_back(make_pair<string, uint32>(name, value));
+			typeNode.EnumValues.push_back(make_pair<string&, uint32&>(name, value));
 
 			if (typeNode.Dimension <= value)
 				typeNode.Dimension = value;
diff -urN code/ryzom/server/src/pd_lib/pd_lib.cpp code/ryzom/server/src/pd_lib/pd_lib.cpp
--- code/ryzom/server/src/pd_lib/pd_lib.cpp	2019-01-13 21:35:04.567686193 +0100
+++ code/ryzom/server/src/pd_lib/pd_lib.cpp	2019-01-14 23:11:15.377892974 +0100
@@ -571,7 +571,7 @@
 			CMessage*	msgupd = new CMessage("PD_UPDATE");
 			msgupd->serial(_DatabaseId);
 			msgupd->serial(_UpdateId);
-			_QueuedMessages.push_back(make_pair<uint32,CMessage*>(_UpdateId, msgupd));
+			_QueuedMessages.push_back(make_pair<uint32&,CMessage*&>(_UpdateId, msgupd));
 			++_UpdateId;
 
 			// serial queue
diff -urN code/ryzom/server/src/pd_lib/pd_messages.cpp code/ryzom/server/src/pd_lib/pd_messages.cpp
--- code/ryzom/server/src/pd_lib/pd_messages.cpp	2019-01-13 21:35:00.667652398 +0100
+++ code/ryzom/server/src/pd_lib/pd_messages.cpp	2019-01-14 23:13:40.529427367 +0100
@@ -504,7 +504,7 @@
 
 		if (message.getType() == CDbMessage::PushContext)
 		{
-			contextsStart.push_back(std::make_pair<uint, bool>(msg, false));
+			contextsStart.push_back(std::make_pair<uint&, bool>(msg, false));
 		}
 		else if (message.getType() == CDbMessage::PopContext)
 		{
@@ -561,7 +561,7 @@
 
 		if (message.getType() == CDbMessage::PushContext)
 		{
-			contextsStart.push_back(std::make_pair<uint, bool>(msg, false));
+			contextsStart.push_back(std::make_pair<uint&, bool>(msg, false));
 		}
 		else if (message.getType() == CDbMessage::PopContext)
 		{
@@ -644,7 +644,7 @@
 
 		if (message.getType() == CDbMessage::PushContext)
 		{
-			contextsStart.push_back(std::make_pair<uint, bool>(msg, false));
+			contextsStart.push_back(std::make_pair<uint&, bool>(msg, false));
 		}
 		else if (message.getType() == CDbMessage::PopContext)
 		{
diff -urN code/ryzom/server/src/pd_lib/pds_common.h code/ryzom/server/src/pd_lib/pds_common.h
--- code/ryzom/server/src/pd_lib/pds_common.h	2019-01-13 21:35:00.707652745 +0100
+++ code/ryzom/server/src/pd_lib/pds_common.h	2019-01-14 23:10:26.057371651 +0100
@@ -28,7 +28,7 @@
 //
 #include "pd_lib.h"
 
-
+using namespace NLMISC;
 
 /**
  * Task Event Listener
diff -urN code/ryzom/server/src/pd_lib/pd_string_mapper.cpp code/ryzom/server/src/pd_lib/pd_string_mapper.cpp
--- code/ryzom/server/src/pd_lib/pd_string_mapper.cpp	2019-01-13 21:35:00.707652745 +0100
+++ code/ryzom/server/src/pd_lib/pd_string_mapper.cpp	2019-01-14 23:14:21.249857859 +0100
@@ -64,7 +64,7 @@
 		return;
 	}
 
-	its = _StringMap.insert(std::make_pair<std::string, uint32>(lowMapStr, id)).first;
+	its = _StringMap.insert(std::make_pair<std::string&, uint32&>(lowMapStr, id)).first;
 	_IdMap[id] = its;
 }
 
diff -urN code/ryzom/server/src/pd_support_service/stat_char_commands.cpp code/ryzom/server/src/pd_support_service/stat_char_commands.cpp
--- code/ryzom/server/src/pd_support_service/stat_char_commands.cpp	2019-01-13 21:35:05.837697203 +0100
+++ code/ryzom/server/src/pd_support_service/stat_char_commands.cpp	2019-02-09 22:19:58.975644772 +0100
@@ -518,13 +518,13 @@
 	if (TheCharScanScriptFile==NULL)
 	{
 		nlwarning("There is no active script file right now from which to extract output directory");
-		return false;
+		return NULL;
 	}
 	bool isOK=true;
 
 	// write the current script file to a tmp file
 	isOK=TheCharScanScriptFile->writeToFile(TmpScriptFileName);
-	if (!isOK) return false;
+	if (!isOK) return NULL;
 
 	// create a new script object and assign the tmp file to it
 	CCharScanScriptFile script;
diff -urN code/ryzom/server/src/persistant_data_service/db_manager.cpp code/ryzom/server/src/persistant_data_service/db_manager.cpp
--- code/ryzom/server/src/persistant_data_service/db_manager.cpp	2019-01-13 21:35:00.857654044 +0100
+++ code/ryzom/server/src/persistant_data_service/db_manager.cpp	2019-02-11 01:17:47.885244556 +0100
@@ -176,7 +176,7 @@
  */
 CDatabase*	CDbManager::createDatabase(TDatabaseId id, CLog* log)
 {
-	CHECK_DB_MGR_INIT(createDatabase, false);
+	CHECK_DB_MGR_INIT(createDatabase, NULL);
 
 	// check db doesn't exist yet
 	CDatabase*	db = getDatabase(id);
@@ -229,7 +229,7 @@
  */
 CDatabase*	CDbManager::loadDatabase(TDatabaseId id, const string& description, CLog* log)
 {
-	CHECK_DB_MGR_INIT(loadDatabase, false);
+	CHECK_DB_MGR_INIT(loadDatabase, NULL);
 
 	nlinfo("CDbManager::loadDatabase(): load/setup database '%d'", id);
 
@@ -785,7 +785,7 @@
 
 	// add listener to task listeners
 	if (listener != NULL)
-		_TaskListeners[id] = std::make_pair<ITaskEventListener*, void*>(listener, arg);
+		_TaskListeners[id] = std::make_pair<ITaskEventListener*&, void*&>(listener, arg);
 
 	return *msgrbs;
 }
diff -urN code/ryzom/server/src/persistant_data_service/pds_database.cpp code/ryzom/server/src/persistant_data_service/pds_database.cpp
--- code/ryzom/server/src/persistant_data_service/pds_database.cpp	2019-01-13 21:35:00.887654304 +0100
+++ code/ryzom/server/src/persistant_data_service/pds_database.cpp	2019-02-10 20:16:04.137744271 +0100
@@ -1195,7 +1195,7 @@
 		if (!buildReference())
 		{
 			PDS_WARNING("adapt(): failed to buildReference()");
-			return false;
+			return NULL;
 		}
 	}
 
diff -urN code/ryzom/server/src/persistant_data_service/pds_type.cpp code/ryzom/server/src/persistant_data_service/pds_type.cpp
--- code/ryzom/server/src/persistant_data_service/pds_type.cpp	2019-01-13 21:35:08.647721572 +0100
+++ code/ryzom/server/src/persistant_data_service/pds_type.cpp	2019-02-09 13:21:04.011645476 +0100
@@ -194,7 +194,7 @@
 	if (!isIndex())
 	{
 		PDS_WARNING("getIndexName(): type is not an index");
-		return false;
+		return NULL;
 	}
 
 	if (isEnum())
diff -urN code/ryzom/server/src/shard_unifier_service/ring_session_manager.cpp code/ryzom/server/src/shard_unifier_service/ring_session_manager.cpp
--- code/ryzom/server/src/shard_unifier_service/ring_session_manager.cpp	2019-01-13 21:35:06.397702058 +0100
+++ code/ryzom/server/src/shard_unifier_service/ring_session_manager.cpp	2019-02-11 01:18:48.895932393 +0100
@@ -203,7 +203,7 @@
 	public:
 		CRingSessionManager() 
 			:	_DontUsePerm(false),
-				_CharSync(false)
+				_CharSync(NULL)
 		{
 			CRingSessionManagerSkel::init(this);
 			CWelcomeServiceClientSkel::init(this);
diff -urN code/ryzom/tools/leveldesign/csv_transform/csv_transform.cpp code/ryzom/tools/leveldesign/csv_transform/csv_transform.cpp
--- code/ryzom/tools/leveldesign/csv_transform/csv_transform.cpp	2019-01-13 21:35:07.857714720 +0100
+++ code/ryzom/tools/leveldesign/csv_transform/csv_transform.cpp	2019-01-14 16:24:00.709271470 +0100
@@ -191,7 +191,8 @@
 	void flush(const CSString &filename)
 	{
 		closeFooters();
-		CSString str = fileHeader + fileBody + fileFooter;
+		CSString str = fileHeader + fileBody;
+		str = str + fileFooter;
 
 		NLMISC::COFile of(filename, false, true);
 		of.serialBuffer((uint8*)str.data(), (uint)str.size());
diff -urN code/ryzom/tools/pd_parser/parser.cpp code/ryzom/tools/pd_parser/parser.cpp
--- code/ryzom/tools/pd_parser/parser.cpp	2019-01-13 21:35:13.197761058 +0100
+++ code/ryzom/tools/pd_parser/parser.cpp	2019-01-14 15:40:57.692393557 +0100
@@ -1189,7 +1189,7 @@
 	uint	i;
 	for (i=0; i<Names.size(); ++i)
 	{
-		CurrentEnumNode->Values.push_back(make_pair<string, uint32>(Names[i], CurrentValue));
+		CurrentEnumNode->Values.push_back(make_pair<__gnu_cxx::__alloc_traits<std::allocator<std::__cxx11::basic_string<char> > >::value_type&, uint32&>(Names[i], CurrentValue));
 	}
 	if (parent != NULL)
 		++(parent->CurrentValue);
@@ -1214,7 +1214,7 @@
 		CurrentValue = 0;
 	}
 
-	CurrentEnumNode->Values.push_back(make_pair<string, uint32>(Name, CurrentValue));
+	CurrentEnumNode->Values.push_back(make_pair<string&, uint32&>(Name, CurrentValue));
 
 	return true;
 }
@@ -1238,7 +1238,7 @@
 
 	if (!EndRange.empty())
 	{
-		CurrentEnumNode->Values.push_back(make_pair<string, uint32>(EndRange, CurrentValue));
+		CurrentEnumNode->Values.push_back(make_pair<string&, uint32&>(EndRange, CurrentValue));
 	}
 
 	return true;
@@ -4709,7 +4709,7 @@
 		CClassNode	*cnd;
 		if ( (tnd = getTypeNode(type, false)) )
 		{
-			pair<map<string, CParseNode*>::iterator, bool>	res = params.insert(make_pair<string, CParseNode*>(name, tnd));
+			pair<map<string, CParseNode*>::iterator, bool>	res = params.insert(make_pair<string&, CTypeNode*&>(name, tnd));
 			if (!res.second)
 				error("log parameter '"+name+"' already defined");
 
@@ -4723,7 +4723,7 @@
 		}
 		else if ( (cnd = getClassNode(type, false)) )
 		{
-			pair<map<string, CParseNode*>::iterator, bool>	res = params.insert(make_pair<string, CParseNode*>(name, cnd));
+			pair<map<string, CParseNode*>::iterator, bool>	res = params.insert(make_pair<string&, CClassNode*&>(name, cnd));
 			if (!res.second)
 				error("log parameter '"+name+"' already defined");
 
@@ -4739,7 +4739,7 @@
 		{
 			CExtLogTypeNode*	extnd = new CExtLogTypeNode();
 			extnd->ExtLogType = "string";
-			pair<map<string, CParseNode*>::iterator, bool>	res = params.insert(make_pair<string, CParseNode*>(name, extnd));
+			pair<map<string, CParseNode*>::iterator, bool>	res = params.insert(make_pair<string&, CExtLogTypeNode*&>(name, extnd));
 			if (!res.second)
 				error("log parameter '"+name+"' already defined");
 
